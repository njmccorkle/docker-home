version: "3.7"

########################### NETWORKS
# docker network create t2_proxy
# docker network create socket_proxy

networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SECRETS
secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  authelia_notifier_smtp_password:
    file: $SECRETSDIR/authelia_notifier_smtp_password
  authelia_jwt_secret:
    file: $SECRETSDIR/authelia_jwt_secret

########################### SERVICES
services:
# All services / apps go below this line

# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-v02.api.letsencrypt.org/directory # LetsEncrypt Production Server
      - --certificatesResolvers.dns-cloudflare.acme.email=/run/secrets/cloudflare_email
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    # networks:
    #   t2_proxy:
    #     ipv4_address: 192.168.90.254 # You can specify a static IP
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 18080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    secrets:
      - cloudflare_email
      - cloudflare_api_key
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  # Routers
      # Traefik dashboard
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain

      # Heatermeter
      - "traefik.http.routers.heatermeter-rtr.entrypoints=https"
      - "traefik.http.routers.heatermeter-rtr.service=heatermeter-svc@file"
      - "traefik.http.routers.heatermeter-rtr.rule=Host(`heatermeter.$DOMAINNAME`)"
      - "traefik.http.routers.heatermeter-rtr.tls=true"

      # homeassistant
      - "traefik.http.routers.homeassistant-rtr.entrypoints=https"
      - "traefik.http.routers.homeassistant-rtr.service=homeassistant-svc@file"
      - "traefik.http.routers.homeassistant-rtr.rule=Host(`homeassistant.$DOMAINNAME`)"
      - "traefik.http.routers.homeassistant-rtr.tls=true"

  # Services
      # API
      - "traefik.http.routers.traefik-rtr.service=api@internal"

  # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" 

  testApp:
    container_name: testApp
    image: containous/whoami:v1.3.0
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.testApp-rtr.entrypoints=https"
      - "traefik.http.routers.testApp-rtr.rule=Host(`testApp.$DOMAINNAME`)"
      - "traefik.http.routers.testApp-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.testApp-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.testApp-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.testApp-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      # - "traefik.http.routers.testApp-rtr.service=testApp-svc"
      # - "traefik.http.services.testApp-svc.loadbalancer.server.port=9000"

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # image: authelia/authelia:latest
    image: authelia/authelia:4.21.0
    restart: always
    networks:
      - t2_proxy
    # depends_on:
    #   - mariadb
    #   - redis
    volumes:
      - $DOCKERDIR/authelia:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      # - CF_API_KEY=$CLOUDFLARE_API_KEY
      
      # - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      # - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
      # - 
      # - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
    secrets:
      - authelia_notifier_smtp_password
      - authelia_jwt_secret
    #   - authelia_session_secret
    #   - authelia_storage_mysql_password
    #   - authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`auth.$DOMAINNAME`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"
  
  sabnzbd:
    image: linuxserver/sabnzbd
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - $SABNZBD_PORT:8080
    volumes:
      - /mnt/docker/sabnzbd:/config
      - /mnt/media:/mnt/media
    environment:
      PUID: '1013'
      PGID: '1013'
      TZ: $TZ
    stdin_open: true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sabnzbd-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr-bypass.rule=Host(`sabnzbd.$DOMAINNAME`) && Query(`apikey`, `$SABNZBD_API_KEY`)"
      - traefik.http.routers.sabnzbd-rtr-bypass.tls=true
      - "traefik.http.routers.sabnzbd-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAINNAME`)"
      - traefik.http.routers.sabnzbd-rtr.tls=true
      - "traefik.http.routers.sabnzbd-rtr.priority=99"
      # Middlewares
      - "traefik.http.routers.sabnzbd-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-authelia@file"
      # HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.routers.sabnzbd-rtr-bypass.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080"
  
  couchpotato:
    image: linuxserver/couchpotato
    container_name: couchpotato
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - /mnt/docker/couchpotato:/config
      - /mnt/media:/mnt/media
    environment:
      PUID: '1013'
      PGID: '1013'
      TZ: $TZ
    # labels:
    #   - traefik.enable=true
    #   - traefik.http.routers.couchpotato-rtr.entrypoints=https
    #   - traefik.http.routers.couchpotato-rtr.rule=Host(`couchpotato.$DOMAINNAME`)
    #   - traefik.http.routers.couchpotato-rtr.tls=true
    #   # - traefik.http.routers.couchpotato-rtr.middlewares=chain-no-auth@file
    #   - traefik.http.routers.couchpotato-rtr.middlewares=chain-authelia@file
    #   - traefik.http.services.couchpotato-svc.loadbalancer.server.port=5050
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.couchpotato-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.couchpotato-rtr-bypass.rule=Host(`couchpotato.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$COUCHPOTATO_API_KEY`) || Query(`apikey`, `$COUCHPOTATO_API_KEY`))"
      - traefik.http.routers.couchpotato-rtr-bypass.tls=true
      - "traefik.http.routers.couchpotato-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.couchpotato-rtr.entrypoints=https"
      - "traefik.http.routers.couchpotato-rtr.rule=Host(`couchpotato.$DOMAINNAME`)"
      - traefik.http.routers.couchpotato-rtr.tls=true
      - "traefik.http.routers.couchpotato-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.couchpotato-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.couchpotato-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.couchpotato-rtr.service=couchpotato-svc"
      - "traefik.http.routers.couchpotato-rtr-bypass.service=couchpotato-svc"
      - "traefik.http.services.couchpotato-svc.loadbalancer.server.port=5050"

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - /mnt/docker/sonarr:/config
      - /mnt/media:/mnt/media
    environment:
      PUID: '1013'
      PGID: '1013'
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - traefik.http.routers.sonarr-rtr-bypass.tls=true
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - traefik.http.routers.sonarr-rtr.tls=true
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"