version: "3.7"

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SERVICES
services:
# All services / apps go below this line

# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    # networks:
    #   t2_proxy:
    #     ipv4_address: 192.168.90.254 # You can specify a static IP
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 18080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" 
  testApp:
    container_name: testApp
    image: containous/whoami:v1.3.0
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.testApp-rtr.entrypoints=https"
      - "traefik.http.routers.testApp-rtr.rule=Host(`testApp.$DOMAINNAME`)"
      - "traefik.http.routers.testApp-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.testApp-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.testApp-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.testApp-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      # - "traefik.http.routers.testApp-rtr.service=testApp-svc"
      # - "traefik.http.services.testApp-svc.loadbalancer.server.port=9000"














######################################################
# networks:
#   web:
#     external: true


# services:
#   traefik-reverse-proxy:
#     container_name: traefik
#     image: traefik:v2.2.1
#     command:
#       - --api=true
#       - --api.dashboard=true
#       - --entrypoints.web.address=:80
#       - --entrypoints.websecure.address=:443
#       - --entrypoints.websecure.http.tls.domains[0].main=$TRAEFIK_BASE_DNS
#       - --entrypoints.websecure.http.tls.domains[0].sans=.$TRAEFIK_BASE_DNS
#       - --certificatesresolvers.cloudflare.acme.email=$TRAEFIK_ACME_EMAIL
#       - --certificatesresolvers.cloudflare.acme.dnschallenge=true
#       - --certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=0
#       - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
#       - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers[0]=1.1.1.1:53
#       - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers[1]=8.8.8.8:53
#       - --certificatesresolvers.cloudflare.acme.caServer=$TRAEFIK_ACME_CASERVER
#       - --certificatesresolvers.cloudflare.acme.storage=/acme.json
#       - --api.debug=$TRAEFIK_DEBUG
#       - --log=$TRAEFIK_LOG
#       # - --log.level=ERROR
#       - --log.level=DEBUG
#       - --providers.docker=true
#       - --providers.docker.exposedbydefault=false
#       - --providers.docker.network=web
#     restart: unless-stopped
#     networks:
#       - web
#     ports:
#       - '80:80'
#       - '443:443'
#     expose:
#         - 8080
#     labels:
#       - traefik.enable=true
#       - traefik.network=web
#       - traefik.port=8080
#       - traefik.http.routers.traefik.service=api@internal
#       - traefik.http.routers.traefik.rule=Host(`$TRAEFIK_DASHBOARD_HOST`)
#       - traefik.http.routers.traefik.middlewares=traefik-auth
#       - traefik.http.middlewares.traefik-auth.basicauth.users=$TRAEFIK_USER_PASS
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       - /opt/traefik/acme.json:/acme.json
#     environment:
#       - CLOUDFLARE_EMAIL=$CLOUDFLARE_EMAIL
#       - CLOUDFLARE_API_KEY=$CLOUDFLARE_API_KEY
#   test-app:
#     image: containous/whoami:v1.3.0
#     labels:
#       # - traefik.http.routers.my-app.rule=Host(`home.mccorkle.co`)
#       - traefik.enable=true
#       - traefik.http.routers.test-app.rule=Host(`test.mccorkle.co`)
#       - traefik.http.routers.test-app.entrypoints=web





# services:
#   traefik:
#     image: traefik:2.3
#     restart: unless-stopped
#     #...supressed
#     command:
#       - --entrypoints.websecure.http.tls.domains[0].main=$TRAEFIK_BASE_DNS
#       - --entrypoints.websecure.http.tls.domains[0].sans=*.$TRAEFIK_BASE_DNS
#       - --certificatesresolvers.cloudflare.acme.email=$TRAEFIK_ACME_EMAIL
#       - --certificatesresolvers.cloudflare.acme.caServer=$TRAEFIK_ACME_CASERVER
#       - --api.debug=$TRAEFIK_DEBUG
#       - --log=$TRAEFIK_LOG
#     #...supressed
#     labels:
#       #...supressed
#       - traefik.http.routers.traefik.rule=Host(`$TRAEFIK_DASHBOARD_HOST`)
#       - traefik.http.middlewares.traefik-auth.basicauth.users=$TRAEFIK_USER_PASS
#     #...supressed
#     environment:
#       - CLOUDFLARE_EMAIL=$CLOUDFLARE_EMAIL
#       - CLOUDFLARE_API_KEY=$CLOUDFLARE_API_KEY
# #...supressed
#     # command:
#     #   - --entrypoints.web.address=:80
#     #   - --providers.docker
#     #   - --api.insecure
#     ports:
#       - "80:80"
#       - "18080:8080"
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock:ro"
#   my-app:
#     image: containous/whoami:v1.3.0
#     labels:
#       - traefik.http.routers.my-app.rule=Host(`home.mccorkle.co`)


